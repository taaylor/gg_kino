# Resolver для динамического разрешения имён (127.0.0.11 - Docker DNS)
resolver 127.0.0.11 valid=10s ipv6=off;

# Обновление upstream для RabbitMQ с использованием shared memory
upstream rabbitmq_management {
    least_conn; # Используем стратегию наименьшего количества соединений
    zone rabbitmq_zone 64k; # Определяем shared memory для upstream

    server rabbitmq-1:15672 resolve;
    server rabbitmq-2:15672 resolve;
    server rabbitmq-3:15672 resolve;
}

server {
    listen       80 default_server;
    listen       [::]:80 default_server;
    server_name  _;

    # Общие таймауты для всех проксируемых запросов
    proxy_connect_timeout 5s;
    proxy_send_timeout 10s;
    proxy_read_timeout 10s;
    proxy_buffering off;

    # Общий обработчик ошибок
    error_page 502 503 504 @service_unavailable;

    location /rabbitmq/ {
        set $backend "rabbitmq_management";
        proxy_pass http://$backend;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        proxy_buffering off;

        # Перехват ошибок от upstream
        proxy_intercept_errors on;

        # Обработчик ошибок для всех недоступных нод
        error_page 502 503 504 = @service_unavailable;
    }

    location /notification/ {
        set $backend "notification:8000";
        proxy_pass http://$backend;
    }

    location /async/ {
        set $backend "async-api:8000";
        proxy_pass http://$backend;
    }

    location /auth/ {
        set $backend "auth-api:8000";
        proxy_pass http://$backend;
    }

    location /admin/ {
        set $backend "admin-panel:8000";
        proxy_pass http://$backend;
    }

    location /about/ {
        set $backend "admin-panel:8000";
        proxy_pass http://$backend;
    }

    location /metrics/ {
        set $backend "metric-api:8000";
        proxy_pass http://$backend;
    }

    location /content-api/ {
        set $backend "content-actions-api:8000";
        proxy_pass http://$backend;

        # Логирование проксирования
        access_log /dev/stdout main;
    }

    location /static/ {
        alias /var/www/static/;
        try_files $uri =404;
    }

    # Общий обработчик для недоступных сервисов
    location @service_unavailable {
        return 503 '{"error": "Service temporarily unavailable", "uri": "$request_uri", "backend": "$upstream_addr"}';
        add_header Content-Type application/json;
        add_header Retry-After 30;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status": "ok"}';
        add_header Content-Type application/json;
    }

    # Возвращать 404 для всех остальных запросов
    location / {
        return 404 '{"error": "Not found"}';
        add_header Content-Type application/json;
    }

    error_page  404              /404.html;
    error_page   500 502 503 504  /50x.html;

    location = /50x.html {
        root   html;
    }

    location = /404.html {
        root   html;
    }
}
