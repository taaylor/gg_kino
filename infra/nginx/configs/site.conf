# Определение upstream'ов с fallback на localhost (всегда доступен)
upstream async-api-upstream {
    server async-api:8000 max_fails=3 fail_timeout=10s;
    server 127.0.0.1:9999 backup;  # backup сервер (недоступен, но не вызывает ошибку запуска)
}

upstream auth-api-upstream {
    server auth-api:8000 max_fails=3 fail_timeout=10s;
    server 127.0.0.1:9999 backup;
}

upstream admin-panel-upstream {
    server admin-panel:8000 max_fails=3 fail_timeout=10s;
    server 127.0.0.1:9999 backup;
}

upstream metric-api-upstream {
    server metric-api:8000 max_fails=3 fail_timeout=10s;
    server 127.0.0.1:9999 backup;
}

upstream content-actions-api-upstream {
    server content-actions-api:8000 max_fails=3 fail_timeout=10s;
    server 127.0.0.1:9999 backup;
}

server {
    listen       80 default_server;
    listen       [::]:80 default_server;
    server_name  _;

    # Общие настройки прокси для всех location'ов
    proxy_connect_timeout 5s;
    proxy_send_timeout 5s;
    proxy_read_timeout 10s;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Общий обработчик ошибок для всех сервисов
    error_page 502 503 504 @service_unavailable;

    location /async/ {
        proxy_pass http://async-api-upstream/async/;
    }

    # Проксирование запросов к /auth/* на auth-api
    location /auth/ {
        proxy_pass http://auth-api-upstream/auth/;
    }

    location /admin/ {
        proxy_pass http://admin-panel-upstream/admin/;
    }

    location /metrics/ {
        proxy_pass http://metric-api-upstream/metrics/;
    }

    location /content-api/ {
        proxy_pass http://content-actions-api-upstream/content-api/;
    }

    location /about/ {
        proxy_pass http://admin-panel-upstream/about/;
    }

    location /static/ {
        alias /var/www/static/;
        try_files $uri =404;
    }

    # Общий fallback для недоступных сервисов
    location @service_unavailable {
        return 503 '{"error": "Service temporarily unavailable", "timestamp": "$time_iso8601", "request_uri": "$request_uri"}';
        add_header Content-Type application/json;
        add_header Retry-After 30;
    }

    # Возвращать 404 для всех остальных запросов
    location / {
        return 404;
    }

    error_page  404              /404.html;

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}
