input {
  beats {
    port => 5044
  }
}

filter {
  if [container] {
    # Парсинг JSON логов (если сообщение является JSON)
    if [message] =~ /^\s*\{.*\}\s*$/ {
      json {
        source => "message"
        target => "parsed_json"
        add_tag => ["json_parsed"]
      }

      # Копируем важные поля из JSON
      if "json_parsed" in [tags] {
        if [parsed_json][level] {
          mutate { add_field => { "log_level" => "%{[parsed_json][level]}" } }
        }
        if [parsed_json][logger] or [parsed_json][name] {
          mutate { add_field => { "logger_name" => "%{[parsed_json][logger]}%{[parsed_json][name]}" } }
        }
      }
    }

    # Обработка Kafka логов с бинарными данными
    if [message] =~ /kafka\.protocol\.parser/ or [message] =~ /ProduceRequest/ {
      mutate {
        add_tag => ["kafka_log"]
        add_field => { "log_category" => "kafka" }
      }

      # Упрощаем Kafka сообщения, убирая бинарные данные
      mutate {
        gsub => [
          "message", "\\\\x[0-9a-fA-F]{2}", "[HEX]",
          "message", "records=b'[^']*'", "records=[BINARY_DATA]",
          "message", "b'\\\\x[^']*'", "[BINARY_DATA]"
        ]
      }
    }

    # Добавляем метаданные контейнера
    mutate {
      add_field => {
        "service_name" => "%{[container][name]}"
        "docker_image" => "%{[container][image][name]}"
        "container_id_short" => "%{[container][id]}"
      }
    }

    # Укорачиваем container ID до 12 символов
    if [container_id_short] {
      mutate {
        gsub => [ "container_id_short", "^(.{12}).*", "\1" ]
      }
    }

    # Определяем log level из сообщения (если не найден в JSON)
    if ![log_level] {
      if [message] =~ /(?i)(ERROR|FATAL|CRITICAL)/ {
        mutate { add_field => { "log_level" => "ERROR" } }
      } else if [message] =~ /(?i)(WARN|WARNING)/ {
        mutate { add_field => { "log_level" => "WARN" } }
      } else if [message] =~ /(?i)(INFO|INFORMATION)/ {
        mutate { add_field => { "log_level" => "INFO" } }
      } else if [message] =~ /(?i)(DEBUG|TRACE)/ {
        mutate { add_field => { "log_level" => "DEBUG" } }
      } else {
        mutate { add_field => { "log_level" => "UNKNOWN" } }
      }
    }

    # Парсинг Python traceback
    if [message] =~ /Traceback \(most recent call last\)/ {
      mutate {
        add_tag => ["python_traceback"]
        replace => { "log_level" => "ERROR" }
      }
    }

    # Обработка русских символов - обеспечиваем UTF-8
    mutate {
      convert => { "message" => "string" }
    }

    # Clean up fields
    mutate {
      remove_field => [ "agent", "ecs", "host" ]
    }
  }
}

output {
  elasticsearch {
    hosts => [ "${ES_HOST}" ]
    index => "docker-logs-%{+YYYY.MM.dd}"
  }
}
