version: '3.8'

services:

  # redis:
  #   image: redis:7-alpine
  #   container_name: redis-container
  #   environment:
  #     - REDIS_PASSWORD=${REDIS_PASSWORD}
  #     - REDIS_USER=${REDIS_USER}
  #     - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
  #     - REDIS_HOST=${REDIS_HOST}
  #     - REDIS_PORT=${REDIS_PORT}
  #     - REDIS_DB=${REDIS_DB}
  #   volumes:
  #     - redis_data:/data
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.50'
  #         memory: 512M
  #       reservations:
  #         cpus: '0.25'
  #         memory: 256M
  #   command: >
  #     sh -c '
  #       mkdir -p /usr/local/etc/redis &&
  #       echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
  #       echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
  #       echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
  #       echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
  #       echo "user default off" > /usr/local/etc/redis/users.acl &&
  #       echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
  #       redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
  #     '
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   restart: always

  theatre-api:
    build:
      context: .
      dockerfile: ./Dockerfile
    depends_on:
      - pg_db
      # pg_db:
      #   condition: service_healthy
      # redis:
      #   condition: service_healthy
    env_file:
      - ./.env
    restart: always

  pg_db:
    image: postgres:15
    env_file:
      - ./.env
    # env_file: .env
    volumes:
      - pg_data_volume:/var/lib/postgresql/data
      # - ./database_dump.sql:/docker-entrypoint-initdb.d/init.sql


  # nginx:
    # image: nginx:latest
    # volumes:
    #   - ./nginx.conf:/etc/nginx/nginx.conf:ro
    #   - ./configs:/etc/nginx/conf.d:ro
    # depends_on:
    #   - theatre-api
    # ports:
    #   - "${NGINX_PORT}:${NGINX_PORT}"
    # restart: always

volumes:
  # elasticsearch_data:
  pg_data_volume:
  # redis_data: