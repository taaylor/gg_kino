include:
  - ./infra/glitchtip/docker-compose.glitchtip.yml
  - ./infra/kafka/docker-compose.kafka.yaml
  - ./infra/elk/docker-compose.elk.yml
  - ./infra/clickhouse/docker-compose.clickhouse.yml
  - ./infra/mongodb/docker-compose.mongodb.yml
  - ./infra/rabbit/docker-compose.rabbit.yml
  - ./services/metric-service/docker-compose.metric-services.yml
  - ./services/event-generator/docker-compose.event-generator.yml
  - ./services/email-sender/docker-compose.email-sender.yml

services:
  elasticsearch:
    container_name: elasticsearch-container
    image: elasticsearch:8.16.5
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    command: bin/elasticsearch
    ports:
      - "${ELASTIC_PORT}:${ELASTIC_PORT}"
    expose:
      - ${ELASTIC_PORT}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    cpus: "2"
    mem_limit: 1024M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "always"

  jaeger:
    container_name: jaeger-container
    image: jaegertracing/all-in-one:1.68.0
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"     # порт веб-интерфейса
      - "4317:4317"       # порт OTLP gRPC
      - "4318:4318"       # порт OTLP HTTP
    restart: "always"

  kibana:
    container_name: kibana-container
    image: kibana:8.16.5
    environment:
      - ELASTICSEARCH_HOSTS="http://${ELASTIC_HOST}:${ELASTIC_PORT}"
      - ELASTICSEARCH_SECURITY_ENABLED=false
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    cpus: "2"
    mem_limit: 1024M
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: "always"

  es-init:
    container_name: es-init-container
    build:
      context: .
      dockerfile: backup/elastic_dump/dump_loader/Dockerfile
    environment:
      - ELASTIC_HOST=${ELASTIC_HOST}
      - ELASTIC_PORT=${ELASTIC_PORT}
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: "no"

  redis:
    container_name: redis-container
    image: redis:7-alpine
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default off" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    expose:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: "always"

  auth-api:
    container_name: auth-api
    build:
      context: .
      dockerfile: ./services/auth-service/src/Dockerfile
    env_file:
      - ./.env
    environment: []
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    cpus: "1"
    mem_limit: 256M
    healthcheck:
      test: [
        "CMD-SHELL",
        "PGPASSWORD=${POSTGRES_PASSWORD} psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -t -c \"SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'profile';\" | xargs -I {} test {} -ge 4"
      ]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: "always"

  async-api:
    container_name: async-api
    build:
      context: .
      dockerfile: ./services/async-api/src/Dockerfile
    env_file:
      - ./.env
    environment: []
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      es-init:
        condition: service_completed_successfully
    cpus: "1"
    mem_limit: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/async/openapi"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "always"

  content-actions-api:
    container_name: content-actions-api
    build:
      context: .
      dockerfile: ./services/content-actions-service/src/Dockerfile
    env_file:
      - ./.env
    environment: []
    depends_on:
      mongodb_init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      async-api:
        condition: service_healthy
      notification:
        condition: service_healthy
    cpus: "1"
    mem_limit: 256M
    expose:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000//content-api/openapi"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "always"

  admin-panel:
    container_name: admin-panel
    build:
      context: .
      dockerfile: ./services/admin-panel/src/Dockerfile
    env_file:
      - ./.env
    environment: []
    volumes:
      - static_django:/var/www/static
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      auth-api:
        condition: service_healthy
    restart: "always"

  postgres:
    container_name: postgres-container
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pg_data_volume:/var/lib/postgresql/data
      - ./backup/postgres_dump-auth/dumps:/dumps
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "always"

  pg-import:
    container_name: pg-import
    build:
      context: .
      dockerfile: ./backup/postgres_dump-auth/Dockerfile
    environment:
      - PG_HOST=${POSTGRES_HOST}
      - PG_PORT=${POSTGRES_PORT}
      - PG_USER=${POSTGRES_USER}
      - PG_DB=${POSTGRES_DB}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      auth-api:
        condition: service_healthy
    restart: "no"

  notification:
    container_name: notification
    env_file:
      - .env
    build:
      context: .
      dockerfile: services/notification-service/src/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      rabbit-init:
        condition: service_completed_successfully
      auth-api:
        condition: service_healthy
      async-api:
        condition: service_healthy
    ports:
      - "8001:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/notification/openapi"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "always"

  link:
    container_name: link
    env_file:
      - .env
    build:
      context: .
      dockerfile: services/short-link-service/src/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/link/openapi"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "always"

  embedding-service:
    container_name: embedding-service
    env_file:
      - .env
    build:
      context: .
      dockerfile: services/embedding-service/src/Dockerfile
    environment:
      - HF_HUB_TIMEOUT=600
    expose:
      - "8000:8000"
    ports:
      - "8000:8000"
    restart: "always"

  ws-sender-worker:
    container_name: ws-sender-worker
    env_file:
      - .env
    build:
      context: .
      dockerfile: services/ws_notification-service/src/Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq-1:
        condition: service_healthy
      rabbitmq-2:
        condition: service_healthy
      rabbitmq-3:
        condition: service_healthy
      rabbit-init:
        condition: service_completed_successfully
    restart: "always"

  nginx:
    container_name: nginx
    image: nginx:1.27.5-alpine
    env_file: .env
    environment: []
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/configs:/etc/nginx/conf.d:ro
      - static_django:/var/www
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
      - "${NGINX_RABBIT_MANAGEMENT_PORT}:${NGINX_RABBIT_MANAGEMENT_PORT}"
    restart: "always"

volumes:
  redis_data:
  pg_data_volume:
  elasticsearch_data:
  static_django:
