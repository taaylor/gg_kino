services:
  redis:
    image: redis:7-alpine
    container_name: redis-container
    env_file:
      - ./.env
    environment:
      - REDIS_PASSWORD=${TEST_REDIS__PASSWORD}
      - REDIS_USER=${TEST_REDIS__USER}
      - REDIS_USER_PASSWORD=${TEST_REDIS_USER__PASSWORD}
      - REDIS_HOST=${TEST_REDIS__HOST}
      - REDIS_PORT=${TEST_REDIS__PORT}
      - REDIS_DB=${TEST_REDIS__DB}
    ports:
      - "${TEST_REDIS__PORT}:${TEST_REDIS__PORT}"
    volumes:
      - test_redis_data:/data
    cpus: "2"
    mem_limit: 512M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $TEST_REDIS__PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default off" > /usr/local/etc/redis/users.acl &&
        echo "user $TEST_REDIS__USER on >$TEST_REDIS_USER__PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$TEST_REDIS__PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  auth-api:
    build:
      context: .
      dockerfile: ./services/auth-service/src/Dockerfile
    container_name: auth-api-container
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always

  postgres:
    image: postgres:17-alpine
    container_name: postgres-container
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${TEST_POSTGRES__USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES__PASSWORD}
      POSTGRES_DB: ${TEST_POSTGRES__DB}
    volumes:
      - test_pg_data_volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_POSTGRES__USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  tests:
    build:
      context: .
      dockerfile: ./services/auth-service/tests/functional/Dockerfile
    container_name: tests-container
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  test_redis_data:
  test_pg_data_volume:
