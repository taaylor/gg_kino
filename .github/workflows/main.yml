name: Kinoservice Workflow

on:
  pull_request:
    branches: [ "main" ]

jobs:

  test-lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==7.2.0 wemake-python-styleguide==1.1.0 flake8-html==0.4.3 mypy==1.13.0 types-ujson

      - name: Test lint
        run: |
          flake8 services/notification-service/src services/content-actions-service/src services/ws_notification-service/src \
          --max-line-length=100 \
          --extend-ignore=E203,W503,C812,C813,C814,C815S,C816,WPS300,WPS111,WPS431,WPS226,WPS110,WPS404,WPS601,WPS237,WPS202,WPS115,WPS201,WPS232 \
          --select=WPS \
          --exclude=services/notification-service/src/migration/*,services/notification-service/src/alembic/* \
          --format=html \
          --htmldir=flake-report
          mypy services/content-actions-service/src --config-file=pyproject.toml --no-implicit-reexport
          mypy services/notification-service/src --config-file=pyproject.toml --no-implicit-reexport
          mypy services/ws_notification-service/src --config-file=pyproject.toml --no-implicit-reexport

      - name: Upload flake8 report  # выгружает отчеты по flake8
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flake8-html-report
          path: flake-report/

  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.12, 3.13]

    env:
      PUBLIC_KEY: ${{ secrets.PUBLIC_KEY }}
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

    steps:
    - uses: actions/checkout@v4

    - name: Download docker-compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Installing missing components for testing
      run: |
        mv .env.example .env
        mkdir -p services/auth-service/src/core/keys
        printf '%s' "$PUBLIC_KEY" > services/auth-service/src/core/keys/public.pem
        printf '%s' "$PRIVATE_KEY" > services/auth-service/src/core/keys/private.pem
        chmod 600 services/auth-service/src/core/keys/private.pem
        chmod 644 services/auth-service/src/core/keys/public.pem

    - name: Start tests content-actions-api
      run: make test-content-service-ci PYTHON_VERSION=${{ matrix.python-version }}

    - name: Start tests metrics-service
      run: make test-metrics-service-ci PYTHON_VERSION=${{ matrix.python-version }}

    - name: Start tests auth-api
      run: make test-auth-api-ci PYTHON_VERSION=${{ matrix.python-version }}

    - name: Start tests async-api
      run: make test-async-api-ci PYTHON_VERSION=${{ matrix.python-version }}

  notify-success:
    runs-on: ubuntu-latest
    needs: [test-lint, build-and-test]  # Зависит от всех предыдущих задач
    if: success()  # Выполняется только при успехе
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: "Pipeline completed successfully for the branch ${{ github.ref }}!"

  notify-failure:
    runs-on: ubuntu-latest
    needs: [test-lint, build-and-test]  # Зависит от всех предыдущих задач
    if: failure()  # Выполняется только при провале
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: "Pipeline completed failure for the branch ${{ github.ref }}!"
