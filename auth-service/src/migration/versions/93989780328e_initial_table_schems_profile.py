"""initial_table_schems_profile

Revision ID: 93989780328e
Revises: bf0ce157b753
Create Date: 2025-04-22 16:59:16.318626

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "93989780328e"
down_revision: Union[str, None] = "bf0ce157b753"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "dict_roles",
        sa.Column("role", sa.String(length=50), nullable=False),
        sa.Column("descriptions", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("role"),
        schema="profile",
    )
    op.create_table(
        "roles_permissions",
        sa.Column("role_code", sa.String(length=50), nullable=False),
        sa.Column("permission", sa.String(length=50), nullable=False),
        sa.Column("descriptions", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_code"],
            ["profile.dict_roles.role"],
        ),
        sa.PrimaryKeyConstraint("role_code"),
        sa.UniqueConstraint("role_code", "permission", name="role_permission_idx"),
        schema="profile",
    )
    op.create_table(
        "user",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("username", sa.String(length=50), nullable=False),
        sa.Column("first_name", sa.String(length=50), nullable=True),
        sa.Column("last_name", sa.String(length=50), nullable=True),
        sa.Column(
            "gender",
            sa.Enum("MALE", "FEMALE", name="genderenum", create_type=False),
            nullable=False,
        ),
        sa.Column("role_code", sa.String(length=50), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_code"],
            ["profile.dict_roles.role"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
        schema="profile",
    )
    op.create_table(
        "user_cred",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["profile.user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("email"),
        schema="profile",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_cred", schema="profile")
    op.drop_table("user", schema="profile")
    op.drop_table("roles_permissions", schema="profile")
    op.drop_table("dict_roles", schema="profile")

    op.execute("DROP TYPE IF EXISTS genderenum")
    # ### end Alembic commands ###
