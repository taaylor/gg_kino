include:
  - ./infra/kafka/docker-compose.kafka.yaml
  - ./infra/clickhouse/docker-compose.clickhouse.yml
  - ./services/metric-service/docker-compose.metric-services.yml
  - ./infra/mongodb/docker-compose.mongodb.yml


services:
  elasticsearch:
    image: elasticsearch:8.16.5
    container_name: elasticsearch-container
    profiles: ["async-api-test"]
    env_file:
      - ./.env
    volumes:
      - test_elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    cpus: "2"         # Прямое ограничение CPU
    mem_limit: 512M   # Прямое ограничение памяти
    command: bin/elasticsearch
    ports:
      - ${TEST_ELASTIC__PORT}:${TEST_ELASTIC__PORT}
    expose:
      - ${TEST_ELASTIC__PORT}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis-container
    profiles: ["async-api-test", "auth-api-test", "content-api-test"]
    env_file:
      - ./.env
    environment:
      - REDIS_PASSWORD=${TEST_REDIS__PASSWORD}
      - REDIS_USER=${TEST_REDIS__USER}
      - REDIS_USER_PASSWORD=${TEST_REDIS_USER__PASSWORD}
      - REDIS_HOST=${TEST_REDIS__HOST}
      - REDIS_PORT=${TEST_REDIS__PORT}
      - REDIS_DB=${TEST_REDIS__DB}
    ports:
      - "${TEST_REDIS__PORT}:${TEST_REDIS__PORT}"
    volumes:
      - test_redis_data:/data
    cpus: "1"
    mem_limit: 512M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $TEST_REDIS__PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default off" > /usr/local/etc/redis/users.acl &&
        echo "user $TEST_REDIS__USER on >$TEST_REDIS_USER__PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$TEST_REDIS__PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  async-api:
    build:
      context: .
      dockerfile: ./services/async-api/src/Dockerfile
    profiles: ["async-api-test"]
    container_name: async-api-container
    env_file:
      - ./.env
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - ${TEST_RUN_PORTS}:${TEST_RUN_PORTS}
    restart: always

  postgres:
    image: postgres:17-alpine
    container_name: postgres-container
    profiles: ["async-api-test", "auth-api-test", "content-api-test"]
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${TEST_POSTGRES__USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES__PASSWORD}
      POSTGRES_DB: ${TEST_POSTGRES__DB}
    volumes:
      - test_pg_data_volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_POSTGRES__USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  pg-import:
    build:
      context: .
      dockerfile: ./backup/postgres_dump-auth/Dockerfile
    profiles: ["content-api-test"]
    environment:
      - PG_HOST=${POSTGRES_HOST}
      - PG_PORT=${POSTGRES_PORT}
      - PG_USER=${POSTGRES_USER}
      - PG_DB=${POSTGRES_DB}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      auth-api:
        condition: service_healthy

  auth-api:
    build:
      context: .
      dockerfile: ./services/auth-service/src/Dockerfile
    profiles: ["auth-api-test", "async-api-test", "content-api-test"]
    container_name: auth-api-container
    cpus: "0.5"
    mem_limit: 256M
    env_file:
      - ./.env
    ports:
      - "8001:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "http://0.0.0.0:8000/auth/openapi.json"]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 30s

  content-actions-api:
    build:
      context: .
      dockerfile: ./services/content-actions-service/src/Dockerfile
    profiles: ["content-api-test"]
    container_name: content-actions-api-container
    env_file:
      - ./.env
    ports:
      - "8099:8000"
    cpus: "1"
    mem_limit: 256M
    depends_on:
      mongodb_init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      auth-api:
        condition: service_started
    restart: always

  tests-content-api:
    build:
      context: .
      dockerfile: ./services/content-actions-service/tests/functional/Dockerfile
    profiles: ["content-api-test"]
    container_name: tests-content-api-container
    cpus: "0.5"
    mem_limit: 256M
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-api:
        condition: service_healthy

  tests-async-api:
    build:
      context: .
      dockerfile: ./services/async-api/tests/functional/Dockerfile
    profiles: ["async-api-test"]
    container_name: tests-async-api-container
    cpus: "0.5"
    mem_limit: 256M
    env_file:
      - ./.env
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      auth-api:
        condition: service_healthy
      async-api:
        condition: service_started
      jaeger:
        condition: service_started

  tests-auth-api:
    build:
      context: .
      dockerfile: ./services/auth-service/tests/functional/Dockerfile
    profiles: ["auth-api-test"]
    container_name: tests-auth-api-container
    cpus: "0.5"
    mem_limit: 256M
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-api:
        condition: service_healthy
      jaeger:
        condition: service_started

  tests-metrics-api:
    build:
      context: .
      dockerfile: ./services/metric-service/tests/functional/Dockerfile
    container_name: tests-metrics-api-container
    profiles: ["metrics-api-test"]
    env_file:
      - ./.env
    depends_on:
      metric-api:
        condition: service_healthy
      zookeeper:
        condition: service_started
      clickhouse-node1:
        condition: service_healthy
      clickhouse-node2:
        condition: service_healthy
      clickhouse-node3:
        condition: service_healthy
      clickhouse-node4:
        condition: service_healthy
      init_clickhouse:
        condition: service_completed_successfully
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-init:
        condition: service_started
      etl:
        condition: service_started


  jaeger:
    image: jaegertracing/all-in-one:1.68.0
    profiles: ["async-api-test", "auth-api-test"]
    container_name: jaeger-container
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "6831:6831/udp"   # принимает трейсы в формате jaeger.thrift по compact thrift protocol
      - "6832:6832/udp"   # принимает трейсы в формате jaeger.thrift по binary thrift protocol
      - "5778:5778"       # порт для конфигурации сэмплирования
      - "16686:16686"     # порт веб-интерфейса
      - "4317:4317"       # порт OTLP gRPC
      - "4318:4318"       # порт OTLP HTTP
      - "14250:14250"     # принимает трейсы в модели данных jaeger.proto
      - "14268:14268"     # принимает трейсы напрямую от клиентов в формате jaeger.thrift
      - "9411:9411"       # порт совместимости с Zipkin
    restart: always

volumes:
  test_redis_data:
  test_elasticsearch_data:
  test_pg_data_volume:
